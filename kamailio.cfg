#!KAMAILIO

################################################################
#
#  front-end SIP proxy configuration
#
################################################################



//#!define WITH_DEBUG
#!define WITH_USRLOCDB
#!define WITH_ACCDB
#!define WITH_ANTIFLOOD
### Use old rtpproxy
##---#!define WITH_RTPPROXY
###use new rtpengine
#!define WITH_RTPENGINE

####### Defined Values #########
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!subst "|DBURL|mysql://kamailio:kamailiorw@localhost/kamailio|"

# - flags
#   FLT_ - per transaction (message) flags
#   FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

sip_warning=0
#sip_warning=1 #not for production
alias=128.75.231.10:5060
#!define ADV_ADDR "128.75.231.10"
server_header="Server: Silent border"


#!ifdef WITH_DEBUG
debug=4
log_stderror=no
#!else
debug=0
//debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

auto_aliases=no

listen=192.168.3.13:5060 advertise 128.75.231.10:5060

# to avoid simple attacks, use unconventional port
##!!port=5060

disable_tls=yes

# this makes it listen on all ipv6 addresses
auto_bind_ipv6=0


dns_try_ipv6=no
dns=no
rev_dns=no

# let kamailio choose the right source IP address
##!!mhomed=1
mhomed=0

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605



####### Modules Section ########
mpath="/usr/lib64/kamailio/modules/"

loadmodule "db_mysql.so"
loadmodule "usrloc.so"
###!!!loadmodule "outbound.so"
loadmodule "tm.so"

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"

loadmodule "path.so"
loadmodule "domain.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
loadmodule "registrar.so"
loadmodule "acc.so"

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif



#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------


modparam("mi_fifo", "fifo_name", "/var/run/kamailio/kamailio_fifo")


# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)



# ----- nathelper params -----
modparam("nathelper", "nortpproxy_str", "a=sdpmangled:yes\r\n")
#!ifdef WITH_DEBUG
modparam("nathelper", "natping_interval", 30)
#!else
modparam("nathelper", "natping_interval", 60)
#!endif
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@212.57.112.28")
# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#modparam("tm|usrloc", "xavp_contact", "ulattrs")
##modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


modparam("path", "use_received", 1)


##for registrar module
# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 1)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)


#!ifdef WITH_RTPPROXY
loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
#!define RTPPROXY_MANAGE rtpproxy_manage("co")
#!endif

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
##2223 - ns protocol
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
#!define RTPPROXY_MANAGE rtpengine_manage("replace-origin replace-session-connection")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#modparam("debugger", "cfgtrace", 0)
#!endif




loadmodule "siptrace.so"
modparam("siptrace", "db_url", DBURL)
##modparam("siptrace", "trace_on", 0)
##Always save foer now
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_flag", 22)


# ----- dispatcher params -----
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "table_name", "dispatcher")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
modparam("dispatcher", "attrs_avp", "$avp(dsattrs)")
modparam("dispatcher", "setid_pvname", "$var(routeset_id)")
modparam("dispatcher", "attrs_pvname", "$var(routeset_attrs)")



modparam("path", "use_received", 1)
#!define FLT_BACKEND 10
#!define FLT_PROXY 11

##for Group 
#loadmodule "group.so"
#modparam("group", "db_url", DBURL)
#modparam("group", "table", "grp")
#modparam("group", "use_domain", 1)

###for auth_db
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "db_url", DBURL)
#modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "domain")
modparam("auth_db", "use_domain", 0)

##for domain
modparam("domain", "db_url", DBURL)


##For firemis MI console
loadmodule "mi_datagram.so"
modparam("mi_datagram", "socket_name", "udp:127.0.0.1:8033")

##htable
loadmodule "htable.so"
##For only in-memory
#modparam("htable", "htable", "aor=>size=7;autoexpire=7200");
##for permanent changes
modparam("htable", "htable", "aor=>size=7;autoexpire=3600;dbtable=htable;dbmode=1");
modparam("htable", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 1)
modparam("acc", "report_ack", 1)
modparam("acc", "report_cancels", 1)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_level", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", 
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;du=$du")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;du=$du")
#!endif

# -- for siremis CDRs --------------
loadmodule "rtimer.so"
loadmodule "sqlops.so"
#modparam("rtimer", "timer", "name=cdr;interval=300;mode=1;")
modparam("rtimer", "timer", "name=cdr;interval=30;mode=1;")
modparam("rtimer", "exec", "timer=cdr;route=CDRS")
#modparam("sqlops", "sqlcon", "cb=>mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("sqlops", "sqlcon", "cb=>DBURL")


#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 5)
modparam("pike", "reqs_density_per_unit", 10)
modparam("pike", "remove_latency", 4)
# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=3600;")
#!define BAN 3
#!endif

loadmodule "uac.so"
##no need this
modparam("uac","restore_mode","none")


####### Routing Logic ########
route {

	route(REQ_DEBUG);

	#!!!! Save sip trace
        setflag(22); 
        sip_trace();




	##Check if req from backend services
	if(ds_is_from_list())
        {
		setflag(FLT_BACKEND);
        }

	route(REQINIT);




        force_rport();

	if (!isflagset(FLT_BACKEND))
        {
		# SIP request packet client->backend
		xlog("L_INFO","==== SIP request packet client->backend $rm $si->$Ri ruri: $ru du: $du\n");


		if(is_method("REGISTER")) {
			route(REGISTER);
			exit();
		}

		##fake unregister method
		if(is_method("INTERNAL_UNREGISTER") && src_ip == myself && $fU == "myself") {
			sht_rm_name_re("aor=>$tU");
			unregister("location", "$tu");
			xlog("L_INFO", "FAKE UNREGISTER DONE rc=$rc fU=$fU tu=$tu\n");
			sl_send_reply("200","OK");	
			exit();
		}

		xlog("L_INFO", "==== CHOOSING AOR: fU=$fu ct=$ct\n");
		if(defined $ct) {
			$var(user)=$(ct{nameaddr.uri});
			$var(aor)=$(ct{nameaddr.uri}{uri.user});
		} else {
			$var(user)=$fu;
			$var(aor)=$fU;
		}
		xlog("L_INFO", "==== SHT VARIABLES: AOR=$var(aor) AOR_HASH=$sht(aor=>$var(aor))\n");

		if(!defined $sht(aor=>$var(aor))) {
			if(is_method("INVITE")) {
				xlog("L_ALERT","AOR $var(aor) not in SHT rm=$rm IP:$si,DROP\n");
				drop();
			}
			#some broken clients not set Contact field
			if(has_totag()) {#in dialog transaction
				if(loose_route()) {#let backent do deside what to do
					xlog("L_INFO","AOR $var(aor) not in SHT IP:$si rm=$rm, loose_route du=$du checking valid route.\n");
					if(ds_is_from_list("-1","2","$du")) {#check if valid backend
						xlog("L_INFO","AOR $var(aor) not in SHT IP:$si rm=$rm, loose_route du=$du route valid.\n");
						t_relay();
						exit();
					}
				}
			}
			xlog("L_ALERT","AOR $var(aor) not in SHT IP:$si rm=$rm, not withindlg and not loose_route, or backend invalid: du=$du DROP !\n");
			drop();
		}
		###Send what code to re-register ???
		#if(!defined $sht(backend=>$avp(ct))) {
		#	$du=$ruri;
		#	sl_send_reply("504","Need Re-Register");
		#	xlog("L_NOTICE", "SEND REDIRECT: $ruri $si $rm $ru\n");
		#	exit;
		#}

		#if(isflagset(FLT_PROXY)) {
		#	subst("/^(Contact|m):(.*:.*@)([^;>]+)/\1:\2$Ri:$Rp;proxy=y/i");
		#} else {
		#	subst("/^(Contact|m):(.*:.*@)([^;>]+)/\1:\2$Ri:$Rp/i");
		#}

		if($(sht(aor=>$var(aor)){param.value,proxy}) == "y") {
		##if($ru =~ "proxy=y") {
			xlog("L_INFO","==== WILL USE PROXY\n");
			setflag(FLT_PROXY);
		}


		if(!loose_route()) {##just strip Route header
			xlog("L_INFO","==== NO LOOSE_ROUTE in dialog result=$rc ruri=$ru !!!\n");
		}

		##set next hop
		$du=$(sht(aor=>$var(aor)){param.value,backend});

		##Change contact
		$var(adv_addr)=ADV_ADDR;
		subst("/^(Contact|m):(.*:.*@)([^;>]+)/\1:\2$var(adv_addr):$Rp/i");

		if (nat_uac_test("19")) {
			xlog("L_INFO", "==== NAT TEST OK: $si $rm $ru -- domain \"$td -- contact: $ct -- $si $Ri\"");
			#!!!add_contact_alias();
			setflag(FLT_NATS);
		} else {
			xlog("L_INFO", "==== NAT TEST FAILED: $si $rm $ru -- domain \"$td\" -- contact: $ct -- $si $Ri");
		}

		if(isflagset(FLT_PROXY)) {
			xlog("L_INFO", "==== SCRIPT: WILL USE PROXY\n");
			##rtpproxy_manage("co");
			RTPPROXY_MANAGE;
		}


#####
## Do record-route only at dialog begin (INVITE) (SUBCRIBE, NOTIFY, OPTIONS to ???)
## Dialog begin - request not ACK and To tag is empty
#####
	    #if(!has_totag()) {##Initial request - start of dialog
	#	xlog("L_INFO", "==== INITIAL REQ, start record_route: $si $rm $ru -- domain \"$td\" -- contact: $ct -- $si $Ri");
	       # record_route();
	    #} 
	    xlog("L_INFO", "==== SCRIPT: C->B going to <$ru> via <$du>\n");
        }
        else
        {
		# SIP request packet backend->client
		xlog("L_INFO","==== SIP request packet backend->client $rm $si->$Ri ruri: $ru du: $du\n");

		if(is_method("REGISTER")) {##no register can be from backend
			xlog("L_ALERT", "REGISTER from backend, dropping.\n");
			drop();
		}

		##================
		##remove_hf("Route");
		if(!loose_route()) {##just strip Route header
			xlog("L_INFO","==== NO LOOSE_ROUTE in dialog result=$rc du=$du ruri=$ru !!!\n");
		} else {
			xlog("L_INFO","==== LOOSE_ROUTE in dialog result=$rc du=$du ruri=$ru !!!\n");
			if(uri == myself) {
				##revert to original values
				$ruri=$ou;
				$du=$null;
			}
		}
		##================

		##lookup in location table
		if(!lookup("location")) { ##Request-URI will be overwritten with the contact
			xlog("L_WARN","[$ruri] NOT IN LOCATION, send 424 Bad Location Information.\n");
			send_reply("424", "Bad Location Information");
			exit();
		}
		xlog("L_INFO","==== AFTER lookup_location result=$rc du=$du ruri=$ru !!!\n");

		$var(aor)=$(ruri{uri.user});
		if(!defined $sht(aor=>$var(aor))) {
			xlog("L_WARN","AOR $var(aor), not in SHT send 424 Bad Location Information.\n");
			send_reply("424", "Bad Location Information");
			exit();
		}
		if($(sht(aor=>$var(aor)){param.value,proxy}) == "y") {
		#if($ru =~ "proxy=y") {
			xlog("L_INFO","==== WILL USE PROXY\n");
			setflag(FLT_PROXY);
			##rtpproxy_manage("co");
			RTPPROXY_MANAGE;
		}

		#No needed - first hop ???
		#if(!has_totag()) {##Initial request - start of dialog
		#	record_route();
		#}

		xlog("L_INFO", "==== SCRIPT: B->C going to <$ru> via <$du>\n");
        }

	# account only INVITEs
	if (is_method("INVITE|CANCEL|BYE")) {
		setflag(FLT_ACC); # do accounting
		setflag(FLT_ACCMISSED); #log the missed calls also
	}
/*
	if (is_method("BYE")) {
		setflag(FLT_ACC); # do accounting ...
		setflag(FLT_ACCFAILED); # ... even if the transaction fails
	}
*/

/*
        if(msg_apply_changes())
        {
	    xlog("L_INFO", "REQ msg_apply_changes OK: cl=$cl HDR=+$hdr(Content-Length)\n");
        } else {
	    xlog("L_INFO", "REQ msg_apply_changes NOT OK: cl=$cl HDR=+$hdr(Content-Length)\n");
        }
*/
	if(!has_totag()) {##Initial request - start of dialog
		xlog("L_INFO", "==== INITIAL REQ, start record_route: $si $rm $ru -- domain \"$td\" -- contact: $ct -- $si $Ri");
		record_route();
	} 
    route(DONE_DEBUG);

    if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
    t_relay();
    xlog("L_INFO", "==== DONE REQUEST ==================\n");
#    exit();
    #forward();
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
        # flood dection from same IP and traffic ban for a while
        # be sure you exclude checking trusted peers, such as pstn gateways
        # - local host excluded (e.g., loop to self)
        if(src_ip!=myself && !isflagset(FLT_BACKEND)) {
                #if($sht(ipban=>$si)!=$null ) {
                if($sht(ipban=>$si) >= BAN ) {
                        # ip is already blocked
                        xlog("L_ALERT", "Request from blocked IP - $rm from $fu ruri=$ruri (IP:$si:$sp)\n");
                        drop;
                }
                if (!pike_check_req()) {
                        xlog("L_ALERT","Pike blocking $rm from $fu ruri=$ruri (IP:$si:$sp)\n");
                        $sht(ipban=>$si) = BAN;
                        drop;
                }
		if($(hdr(Record-Route)[0]{nameaddr.uri}) != $si and $(hdr(Record-Route)[0]{nameaddr.uri}) != $null) {
                   xlog("L_ALERT","Spoofing attack detected from $si, blocking.\n");
		   $sht(ipban=>$si) = BAN;
                   drop;
                }
        }
#!endif
        if (!mf_process_maxfwd_header("10")) {
                sl_send_reply("483","Too Many Hops");
		xlog("L_ALERT", "$si $rm $ru -- too many hops\n");
                drop;
        }
        
        if(!sanity_check("1511", "7"))
        {
                xlog("L_ALERT", "Malformed SIP message from $si:$sp\n");
		xlog("L_INFO", "$mb");
                drop;
        }
}

route[REGISTER] {
	$var(user)=$tu;

	if(!is_subscriber("$var(user)","subscriber",0)) {
	    xlog("L_ALERT", "REGISRER REQ: AOR $var(user) is not subscriber ($si)\n");
	    drop();
	}
	xlog("L_INFO", "==== SUBSCRIBER $var(user) $si $rm $ru domain: $avp(domain)\n");

	if (!lookup_domain("$avp(domain)", "dattr_")) {
	    xlog("L_ERR", "REGISRER REQ: $si $var(user) $rm $ru -- to_domain \"$avp(domain)\" is not " +
		"found in domain table\n");
	    drop();
	}

	if (!defined $avp(dattr_routeset))
	{
	    xlog("L_ERR",
		"REGISRER REQ: $si $rm $ru -- attribute \"routeset\" is " +
		"undefined for domain $avp(domain)\n");
	    drop();
	}

	xlog("L_INFO", "==== SUBSCRIBER $var(user) $avp(domain) routeset: $avp(dattr_routeset)\n");

	if( !ds_select_dst($avp(dattr_routeset), "1") )
	{
	    xlog("L_ERR", "REGISRER REQ: DISPATCHER catn find route for routeset: $avp(dattr_routeset)\n");
	    drop();
	}
	xlog("L_INFO", "==== SCRIPT: going to <$ru> via <$du> attrs=$avp(dsattrs)\n");
	
	#save original contact
	$avp(tu)=$tu;
	$avp(aor)=$tU;
	$avp(ua)=$ua;
	$avp(si)=$si;

	##Use proxy
	if($avp(dsattrs) == "proxy=y") {
		setflag(FLT_PROXY);
		$avp(reg)="backend="+$du+";proxy=y";
	} else {
		$avp(reg)="backend="+$du;
	}

	##Change contact
	$var(adv_addr)=ADV_ADDR;
	subst("/^(Contact|m):(.*:.*@)([^;>]+)/\1:\2$var(adv_addr):$Rp/i");

	/*
	$var(rem_domain) = $(du{uri.domain});
	##Change to domain
	subst("/^(To):(.*:.*@)([^;>]+)/\1:\2$var(rem_domain)/i");

	##Change from domain
	subst("/^(From):(.*:.*@)([^;>]+)/\1:\2$var(rem_domain)/i");


	##Change R-URI to one which we get from dispatcher table
	$ru=$du;
	*/

	if (nat_uac_test("19")) {
		xlog("L_INFO", "==== NAT TEST OK: $si $rm $ru -- domain \"$td -- contact: $ct -- $si $Ri\"");
		##!!!add_contact_alias();
		setflag(FLT_NATS);
	} else {
		xlog("L_INFO", "==== NAT TEST FAILED: $si $rm $ru -- domain \"$td\" -- contact: $ct -- $si $Ri");
	}


#Expires: 3600
#Contact: <sip:84957483333@212.57.112.28:5060;proxy=y>;expires=3600
	##always use received
	fix_nated_register();
	xlog("L_INFO", "==== REGISTER avp(RECEIVED)=$avp(RECEIVED)\n");
	//if(($hdr(Expires) != "" && $(hdr(Expires){s.int}) == 0) || $ct =~ "expires=0") {##unregister
	if((search_hf("Expires","^0","f") || $ct =~ "expires=0") && is_present_hf("Authorization")) {##unregister
		xlog("L_INFO", "==== UNREGISTER $tu");
		#sht_rm_name_re("aor=>$avp(aor)");
		#unregister("location","$tu");
		if(!t_is_set("onreply_route")) t_on_reply("REPLY_UNREGISTER");

		route(DONE_DEBUG);
		t_relay();
		exit();
	}

	if(!t_is_set("onreply_route")) t_on_reply("REPLY_REGISTER");
	route(DONE_DEBUG);
	t_relay();
	exit();
}


event_route[usrloc:contact-expired] {
	xlog("L_INFO","Expired contact for $ulc(exp=>aor)\n");
	#$sht_rm_name_re("aor=>$avp($ulc(exp=>aor))");
}


route[REQ_DEBUG] {
#!ifdef WITH_DEBUG
	dbg_sip_msg("L_INFO", "LOG_LOCAL0");
	dbg_pv_dump(6, "L_INFO");
	xlog("L_INFO", ">>>> REQUEST to $rm: $si -> $Ri\n");
#!endif
	return(1);
}

route[REPLY_DEBUG] {
#!ifdef WITH_DEBUG
	xlog("L_INFO", ">>>> REPLY to $rm: $si -> $Ri\n");
	dbg_sip_msg("L_INFO", "LOG_LOCAL0");
	dbg_pv_dump(6, "L_WARN");
#!endif
	return(1);
}

route[DONE_DEBUG] {
#!ifdef WITH_DEBUG
	dbg_sip_msg("L_INFO", "LOG_LOCAL0");
	dbg_pv_dump(6, "L_INFO");
	xlog("L_INFO", ">>>> $rm DONE: $si -> $Ri du=$du\n");
#!endif
	return(1);
}

##called when reply to REGISTER
onreply_route[REPLY_REGISTER] {
	#route(REPLY_DEBUG);

	if(status=~"[2][0-9][0-9]") {
		xlog("L_INFO", "==== REPLY REGISTER avp(RECEIVED)=$avp(RECEIVED)\n");
		##Do sip ping nated client
		if(isflagset(FLT_NATS)) {
			setbflag(FLB_NATB);
			setbflag(FLB_NATSIPPING);
			xlog("L_INFO", "==== NATED CUNTACT, will do NAT PING.\n");
		}
		##restore UA
		remove_hf("User-Agent");
		append_hf("User-Agent: $avp(ua)\r\n");
		#save parameters from request to sht
		$sht(aor=>$avp(aor))=$avp(reg);
		msg_apply_changes();
		#save("location", "0x07");
		save("location", "0x06");
		xlog("L_INFO", "==== LOCATION SAVE ret: $rc\n");
		#remove from ipban hash
		sht_rm_name_re("ipban=>$avp(si)");
		route(DONE_DEBUG);
	} else {
#!ifdef WITH_ANTIFLOOD
		#sht_rm_name_re("aor=>$avp(aor)");
                if($sht(ipban=>$avp(si)) != $null) {
                    $sht(ipban=>$avp(si)) = $sht(ipban=>$avp(si)) + 1;
		    if($sht(ipban=>$avp(si)) >= BAN) {
                        # block
                        xlog("L_ALERT", "REGISTRATION req for $avp(aor) blocked (IP:$avp(si))\n");
                        exit;
		    }
                } else {
			$sht(ipban=>$avp(si))=1;
		}
#!endif
	}
}
##called when reply to UNREGISTER
onreply_route[REPLY_UNREGISTER] {

	if(status=~"[2][0-9][0-9]") {
		xlog("L_INFO", "==== REPLY UNREGISTER avp(RECEIVED)=$avp(RECEIVED)\n");
		sht_rm_name_re("ipban=>$avp(si)");
		#send faked UNSEGISTER to mysqlf
		$uac_req(method)="INTERNAL_UNREGISTER";
		$uac_req(ruri)="sip:"+$Ri+":"+$Rp;
		$uac_req(furi)="sip:myself@"+$Ri;
		$uac_req(turi)=$avp(tu);
		uac_req_send();
		xlog("L_INFO", "==== FAKED UNREGISTER send req rc=$rc\n");

		route(DONE_DEBUG);
	} else {
#!ifdef WITH_ANTIFLOOD
		#sht_rm_name_re("aor=>$avp(aor)");
                if($sht(ipban=>$avp(si)) != $null) {
                    $sht(ipban=>$avp(si)) = $sht(ipban=>$avp(si)) + 1;
		    if($sht(ipban=>$avp(si)) >= BAN) {
                        # block
                        xlog("L_ALERT", "REGISTRATION req for $avp(aor) blocked (IP:$avp(si))\n");
                        exit;
		    }
                } else {
			$sht(ipban=>$avp(si))=1;
		}
#!endif
	}
}


#onreply_route {
reply_route {

	route(REPLY_DEBUG);

	if (!t_check_trans()) {
		 xlog("L_INFO", "REPLY out of transaction, DROPPING rm=$rm ruri=$ruri si=$si!!!\n");
		drop();
	}
	xlog("L_INFO", ">>>> MAIN REPLY_ROUTE DONE\n");
}
  
onreply_route[MANAGE_REPLY] {

  if(isflagset(FLT_BACKEND)) {
    xlog("L_INFO", "==== REPLY: FLT_BACKEND FLAG SET !!!!");
  } else {
    xlog("L_INFO", "==== REPLY: FLT_BACKEND FLAG IS NOT SET !!!!");
  } 


	##Check if req from backend services
        #if(!ds_is_from_list())
        if(!isflagset(FLT_BACKEND))
        {
            # SIP reply packet client->backend
	    ##!!!add_contact_alias();
	
	    ##must be before rtpproxy_manage, because sdp content-length changed
	    if(isflagset(FLT_PROXY)) {
			subst("/^(Contact|m):(.*:.*@)([^;>]+)/\1:\2$Ri:$Rp;proxy=y/i");
	    } else {
			subst("/^(Contact|m):(.*:.*@)([^;>]+)/\1:\2$Ri:$Rp/i");
	    }

	    if(status=~"[12][0-9][0-9]") {
		if(isflagset(FLT_PROXY)) {
		    xlog("L_INFO", "==== WILL USE PROXY client->backend\n");
		    ##rtpproxy_manage("co");
		    RTPPROXY_MANAGE;
		}
	    }
        }
        else
        {
            # SIP reply packet backend->client

	    if(status=~"[12][0-9][0-9]") {
		if(isflagset(FLT_PROXY)) {
		    xlog("L_INFO", "==== WILL USE PROXY backend->client\n");
		    ##if($cl > 0) remove_hf("Content-Length");
		    ##rtpproxy_manage("co");
		    RTPPROXY_MANAGE;
		    xlog("L_INFO", "==== cl=$cl HDR=$hdr(Content-Length)\n");
		}
	    }
        }
#!ifdef WITH_RTPPROXY
	##Если это здесь не позвать, то почему-то съезжает Content-Length после rtpproxy_manage
        if(msg_apply_changes())
        {
	    xlog("L_INFO", "==== msg_apply_changes OK: cl=$cl HDR=$hdr(Content-Length)\n");
        } else {
	    xlog("L_INFO", "==== msg_apply_changes NOT OK: cl=$cl HDR=$hdr(Content-Length)\n");
        }


##########################################################################################
### msg_apply_changes по док-ии не должна вызываться из onreply_roure[....]
### возникает такая ошибка:
### ERROR: tm [t_reply.c:289]: update_totag_set(): ERROR: update_totag_set: to not parsed
### нужно сделать eval какого-нибудт PV, тогда ошмибки не будет.  
	$var(dummy)=$rm;
##########################################################################################
#!endif
        route(DONE_DEBUG);
	xlog("L_INFO", ">>>> MANAGE_REPLY DONE\n");

    return(1);
}

##!!!!!
# ======================================================
# Populate CDRs Table of Siremis
# ======================================================
route[CDRS] {
##!!! temporary disable
	sql_query("cb","call kamailio_cdrs()","rb");
	sql_query("cb","call kamailio_rating('default')","rb");
}



# Local Variables:
# mode: sh
# sh-indent-after-if: 0
# indent-tabs-mode: nil
# tab-width: 4
# End:
